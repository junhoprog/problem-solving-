
//
#include<iostream>
#include<vector>
#define MAX 1000000000
using namespace std;

long long int DP[101][11];
int main()
{
	int n;
	cin >> n;
	for (int i = 1; i <= 9; i++)
	{
		DP[1][i] = 1;
	}
	DP[1][0] = 0;

	for (int i = 2; i <= n; i++)
	{
		for (int j = 0; j <= 9; j++)
		{
			if (j == 0)
			{
				DP[i][j] = DP[i - 1][j + 1]%MAX;//0의 개수는 전 계단의 1개수
			}
			else if (j == 9)
			{

				DP[i][j] = DP[i - 1][j - 1]%MAX;//9의 개수는 전 계단의 8개수
			}
			else {
				DP[i][j] = (DP[i - 1][j - 1]+DP[i-1][j+1])%MAX;//7의 개수는 전 계단의 6과 8수
			}
		}
	}
	long long int sum = 0;
	for (int i = 0; i <= 9; i++)
	{
		sum += DP[n][i];
	}
	cout << sum%MAX ;
	return 0;
}

/*
1 2 3 4 5 6 7 8 9  9 ->1

10 12 21 23 32 34 43 45 54 56 65 67 76 78 87 89 98 17 ->2

전 숫자
101 121 123 210 212 232 234 321 323 343 345 432 434 454 456 543 545
565 567 654 656 676 678 765 767 787 789 876 878 898 987 989			32 ->3

1010 1012 1210 1212 1232 1234 2101 2121 2123 2321 2323 2343 2345 3210 3212 3232 3234
3432 3434 3454 3456 4321 4323 4343 4345 4543 4545 ->6
61
0과 9의 개수각 1개씩 늘어남. 1~8은 2개 이 개수를 측정할 필요있음

10101  끝이 0이거나 9인것.
*/